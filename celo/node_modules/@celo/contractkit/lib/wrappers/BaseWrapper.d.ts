import { TransactionObject } from 'web3/eth/types';
import { ContractKit } from '../kit';
import { TxOptions } from '../utils/send-tx';
import { TransactionResult } from '../utils/tx-result';
declare type Method<I extends any[], O> = (...args: I) => TransactionObject<O>;
export declare abstract class BaseWrapper<T> {
    protected readonly kit: ContractKit;
    protected readonly contract: T;
    constructor(kit: ContractKit, contract: T);
    protected proxySend<I extends any[], O>(methodFn: Method<I, O>): (...args: I) => CeloTransactionObject<O>;
    protected proxyCall<I extends any[], O>(methodFn: Method<I, O>): (...args: I) => Promise<O>;
    protected proxyCallAndTransform<I extends any[], O, F>(methodFn: Method<I, O>, post: (input: O) => F): (...args: I) => Promise<F>;
    protected wrapSend<O>(txo: TransactionObject<O>): CeloTransactionObject<O>;
}
export interface CeloTransactionObject<O> {
    txo: TransactionObject<O>;
    send(options?: TxOptions): Promise<TransactionResult>;
}
export {};
