import { TransactionObject } from 'web3/eth/types';
import { Address } from '../base';
import { Validators } from '../generated/types/Validators';
import { BaseWrapper } from './BaseWrapper';
import BN = require('bn.js');
export interface Validator {
    address: Address;
    id: string;
    name: string;
    url: string;
    publicKey: string;
    affiliation: string | null;
}
export interface ValidatorGroup {
    address: Address;
    id: string;
    name: string;
    url: string;
    members: Address[];
}
export interface ValidatorGroupVote {
    address: Address;
    votes: BN;
}
export declare class ValidatorsWrapper extends BaseWrapper<Validators> {
    getRegisteredValidators(): Promise<Validator[]>;
    getValidator(address: Address): Promise<Validator>;
    getRegisteredValidatorGroups(): Promise<ValidatorGroup[]>;
    getValidatorGroup(address: Address): Promise<ValidatorGroup>;
    getValidatorGroupsVotes(): Promise<ValidatorGroupVote[]>;
    getVoteFrom(validatorAddress: Address): Promise<Address | null>;
    revokeVote(): Promise<TransactionObject<boolean>>;
    vote(validatorGroup: Address): Promise<TransactionObject<boolean>>;
    private findLesserAndGreaterAfterVote;
}
