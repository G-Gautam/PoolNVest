import { StableToken } from '../generated/types/StableToken';
import { BaseWrapper } from './BaseWrapper';
export declare class StableTokenWrapper extends BaseWrapper<StableToken> {
    allowance: (owner: string, spender: string) => Promise<string>;
    balanceOf: (owner: string) => Promise<string>;
    minter: () => Promise<string>;
    name: () => Promise<string>;
    symbol: () => Promise<string>;
    decimals: () => Promise<string>;
    owner: () => Promise<string>;
    totalSupply: () => Promise<string>;
    getInflationParameters: () => Promise<{
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    }>;
    valueToUnits: (value: string | number) => Promise<string>;
    unitsToValue: (units: string | number) => Promise<string>;
    approve: (spender: string, value: string | number) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    mint: (to: string, value: string | number) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    burn: (value: string | number) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    transferWithComment: (to: string, value: string | number, comment: string) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    transfer: (to: string, value: string | number) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    transferFrom: (from: string, to: string, value: string | number) => import("./BaseWrapper").CeloTransactionObject<boolean>;
    setInflationParameters: (rateNumerator: string | number, rateDenominator: string | number, updatePeriod: string | number) => import("./BaseWrapper").CeloTransactionObject<void>;
}
