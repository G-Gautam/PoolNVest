import BN from 'bn.js';
import { TransactionObject } from 'web3/eth/types';
import { Address } from '../base';
import { BondedDeposits } from '../generated/types/BondedDeposits';
import { BaseWrapper } from '../wrappers/BaseWrapper';
export interface VotingDetails {
    accountAddress: Address;
    voterAddress: Address;
    weight: BN;
}
interface Deposit {
    time: BN;
    value: BN;
}
export interface Deposits {
    bonded: Deposit[];
    notified: Deposit[];
    total: {
        gold: BN;
        weight: BN;
    };
}
export declare class BondedDepositsWrapper extends BaseWrapper<BondedDeposits> {
    getAccountWeight(account: Address): Promise<BN>;
    getVotingDetails(accountOrVoterAddress: Address): Promise<VotingDetails>;
    getBondedDepositValue(account: string, noticePeriod: string): Promise<BN>;
    getBondedDeposits(account: string): Promise<Deposit[]>;
    getNotifiedDepositValue(account: string, availTime: string): Promise<BN>;
    getNotifiedDeposits(account: string): Promise<Deposit[]>;
    getDeposits(account: string): Promise<Deposits>;
    delegateRewardsTx(account: string, delegate: string): Promise<TransactionObject<void>>;
    private getValueFromDeposit;
    private getParsedSignatureOfAddress;
    private zipAccountTimesAndValuesToDeposits;
}
export {};
