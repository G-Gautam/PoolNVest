import { CeloContract } from './base';
import { ContractKit } from './kit';
import { AttestationsWrapper } from './wrappers/Attestations';
import { BondedDepositsWrapper } from './wrappers/BondedDeposits';
import { ExchangeWrapper } from './wrappers/Exchange';
import { GoldTokenWrapper } from './wrappers/GoldTokenWrapper';
import { StableTokenWrapper } from './wrappers/StableTokenWrapper';
import { ValidatorsWrapper } from './wrappers/Validators';
declare const WrapperFactories: {
    [CeloContract.Attestations]: typeof AttestationsWrapper;
    [CeloContract.BondedDeposits]: typeof BondedDepositsWrapper;
    [CeloContract.Exchange]: typeof ExchangeWrapper;
    [CeloContract.GoldToken]: typeof GoldTokenWrapper;
    [CeloContract.StableToken]: typeof StableTokenWrapper;
    [CeloContract.Validators]: typeof ValidatorsWrapper;
};
declare type CFType = typeof WrapperFactories;
export declare type ValidWrappers = keyof CFType;
interface WrapperCacheMap {
    [CeloContract.Attestations]?: AttestationsWrapper;
    [CeloContract.BondedDeposits]?: BondedDepositsWrapper;
    [CeloContract.Exchange]?: ExchangeWrapper;
    [CeloContract.GoldToken]?: GoldTokenWrapper;
    [CeloContract.StableToken]?: StableTokenWrapper;
    [CeloContract.Validators]?: ValidatorsWrapper;
}
export declare class WrapperCache {
    readonly kit: ContractKit;
    private wrapperCache;
    constructor(kit: ContractKit);
    getAttestations(): Promise<AttestationsWrapper>;
    getBondedDeposits(): Promise<BondedDepositsWrapper>;
    getExchange(): Promise<ExchangeWrapper>;
    getGoldToken(): Promise<GoldTokenWrapper>;
    getStableToken(): Promise<StableTokenWrapper>;
    getValidators(): Promise<ValidatorsWrapper>;
    getContract<C extends ValidWrappers>(contract: C): Promise<NonNullable<WrapperCacheMap[C]>>;
}
export {};
