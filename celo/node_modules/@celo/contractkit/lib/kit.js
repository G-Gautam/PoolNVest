"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_1 = __importDefault(require("web3"));
var address_registry_1 = require("./address-registry");
var base_1 = require("./base");
var contract_cache_1 = require("./contract-cache");
var send_tx_1 = require("./utils/send-tx");
var tx_result_1 = require("./utils/tx-result");
var web3_contract_cache_1 = require("./web3-contract-cache");
function newKit(url) {
    return newKitFromWeb3(new web3_1.default(url));
}
exports.newKit = newKit;
function newKitFromWeb3(web3) {
    return new ContractKit(web3);
}
exports.newKitFromWeb3 = newKitFromWeb3;
var ContractKit = /** @class */ (function () {
    function ContractKit(web3) {
        this.web3 = web3;
        this.defaultOptions = {
            gasInflationFactor: 1.3,
        };
        this.registry = new address_registry_1.AddressRegistry(this);
        this._web3Contracts = new web3_contract_cache_1.Web3ContractCache(this);
        this.contracts = new contract_cache_1.WrapperCache(this);
    }
    ContractKit.prototype.setGasCurrency = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.defaultOptions;
                        if (!(token === base_1.CeloContract.GoldToken)) return [3 /*break*/, 1];
                        _b = undefined;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.registry.addressFor(token)];
                    case 2:
                        _b = _c.sent();
                        _c.label = 3;
                    case 3:
                        _a.gasCurrency = _b;
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ContractKit.prototype, "defaultAccount", {
        get: function () {
            return this.web3.eth.defaultAccount;
        },
        set: function (address) {
            this.web3.eth.defaultAccount = address;
        },
        enumerable: true,
        configurable: true
    });
    ContractKit.prototype.setGasCurrencyAddress = function (address) {
        this.defaultOptions.gasCurrency = address;
    };
    ContractKit.prototype.sendTransaction = function (tx) {
        var promiEvent = this.web3.eth.sendTransaction(__assign({ from: this.defaultOptions.from, 
            // TODO this won't work for locally signed TX
            gasPrice: '0', 
            // @ts-ignore
            gasCurrency: this.defaultOptions.gasCurrency }, tx));
        return tx_result_1.toTxResult(promiEvent);
    };
    ContractKit.prototype.sendTransactionObject = function (txObj, options) {
        return send_tx_1.sendTransaction(txObj, __assign({}, this.defaultOptions, options));
    };
    return ContractKit;
}());
exports.ContractKit = ContractKit;
//# sourceMappingURL=kit.js.map